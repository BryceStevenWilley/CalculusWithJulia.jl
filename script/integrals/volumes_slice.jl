
using CalculusWithJulia
using CalculusWithJulia.WeaveSupport
using Plots
nothing


imgfile = "figures/michelin-man.jpg"
caption = """

Hey Michelin Man, how much does that costume weigh?

"""
ImageFile(imgfile, caption)


imgfile = "figures/integration-glass.jpg"
caption = L"""

A wine glass oriented so that it is seen as generated by revolving a
curve about the $x$ axis. The radius of revolution varies as a function of $x$
between about $0$ and $6.2$cm.

"""
ImageFile(imgfile, caption)


note(L"""

The formula is for a rotation around the $x$-axis, but can easily be generalized to rotating around any line (say the $y$-axis or $y=x$, ...) just by adjusting what $r(x)$ is taken to be.

""")


using CalculusWithJulia  # loads `QuadGK`, `Roots`, `SymPy`
using Plots
d0, d1, h = 2.5, 3.75, 4.75
rad(x) = d0/2 + (d1/2 - d0/2)/h * x
vol, _ = quadgk(x -> pi * rad(x)^2, 0, h)


vol / 231 * 128


imgfile = "figures/red-solo-cup.jpg"
caption = "Markings on the red Solo cup indicated various volumes"
ImageFile(imgfile, caption)


Vol(h) = quadgk(x -> pi * rad(x)^2, 0, h)[1]


v = 5
h5 = find_zero(h -> Vol(h) - v*231/128, 4)


v = 12
h12 = find_zero(h -> Vol(h) - v*231/128, 4)


h5/h, h12/h


@vars r h x y
R = r*(1 - y/h)
integrate(pi*R^2, (y, 0, h))


rad(x) = 1/x
vol, _ = quadgk(x -> pi*rad(x)^2, 1, Inf)


note("""

The interest in this figure is that it has **infinite** surface area,
leading to the [paradox](http://tinyurl.com/osawwqm) that it seems possible to
fill it with paint, but not paint the outside.

""")


d(h) = h <= 44 ? 2*sqrt(26^2 - (h-20)^2) : 20 * exp(-(h-44)/10)
rad(h) = d(h)/2


V, _ = quadgk(h -> pi * rad(h)^2, 0, 50)


V_int, _ = quadgk(h -> pi * (rad(h) - 1/2)^2, 1/2, 50)


V - V_int


Rad(x) = sqrt(1 - (x-1)^2)
rad(x) = x
V, _ = quadgk(x -> pi*(Rad(x)^2 - rad(x)^2), 0, 1)


d0, d1, h = 2.5, 3.75, 4.75
d(x) = d0 + (d1 - d0)/h * x
vol, _ = quadgk(x -> d(x)^2, 0, h)
vol / 231 * 128


#The following illustrates $R=5$ and $h=8$.

R =5; h1 = 2*4

theta = asin(h1/2/R)
thetas = range(-theta, stop=theta, length=100)
ts = range(-pi, stop=pi, length=100)
y = h1/4

p = plot(legend=false, aspect_ratio=:equal);
plot!(p, R*cos.(ts), R*sin.(ts));
plot!(p, R*cos.(thetas), R*sin.(thetas), color=:orange);

plot!(p, [R*cos.(theta), R*cos.(theta)], [h1/2, -h1/2], color=:orange);
plot!(p, [R*cos.(theta), sqrt(R^2 - y^2)], [y, y], color=:orange)

plot!(p, [0, R*cos.(theta)], [0,0], color=:red);
plot!(p,[ 0, R*cos.(theta)], [0,h1/2], color=:red);

annotate!(p, [(.5, -2/3, "sqrt(R^2- (h/2)^2"),
              (R*cos.(theta)-.6, h1/4, "h/2"),
              (1.5, 1.75*tan.(theta), "R")])

p


imgfile ="figures/big-solo-cup.jpg"
caption = " Big solo cup. "
ImageFile(imgfile, caption)


gft = 7.48052
rad(h) = 5 + (3/15)*h
a,err = quadgk(h -> pi*rad(h)^2, 0, 15)
val = a*gft
numericq(val, 1e1)


imgfile ="figures/beer_glasses.jpg"
caption = "A variety of different serving glasses for beer."
ImageFile(imgfile, caption)


r1(h) = 3 + h/5
s1(h) = 2 + log(1 + h)
r_vol(h) = quadgk(x -> pi*r1(x)^2, 0, h)[1]
s_vol(h) = quadgk(x -> pi*s1(x)^2, 0, h)[1]


h450 = find_zero(h -> r_vol(h) - 450, 10)
numericq(h450)


h225 = find_zero(h -> r_vol(h) - 225, 10)
numericq(h225)


numericq(h225/450 * 100, 2, units="percent")


numericq(r_vol(h450/2)/450*100, 2, units="percent")


h450 = find_zero(h -> s_vol(h) - 450, 10)
numericq(h450)


h225 = find_zero(h -> s_vol(h) - 225, 10)
numericq(h225)


numericq(h225/450 * 100, 2, units="percent")


numericq(s_vol(h450/2)/450*100, 2, units="percent")


yesnoq("yes")


choices = [
L"1/3 \cdot b\cdot h",
L"1/3 \cdot w^2\cdot h",
L"l\cdot w \cdot h/ 3"
]
ans = 2
radioq(choices, ans)


f(x) = 3*sqrt( 1 - (x/2)^2 )
val, _ = quadgk(x -> pi * f(x)^2, -2, 2)
numericq(val)


choices = [
L"4/3 \cdot \pi a b^2",
L"4/3 \cdot \pi a^2 b",
L"\pi/3 \cdot a b^2"
]
ans = 1
radioq(choices, ans)


Ra(x) = sqrt(x)
ra(x) = 1
a,b=1,2
val, _ = quadgk(x -> pi * (Ra(x)^2 - ra(x)^2), a,b)
numericq(val)


plot([x->x^3 - 1, x -> x-1], 0, 1)


Ra(y) = cbrt(y+1)
ra(y) = y + 1
a,b = 0, 1
val, _ = quadgk(x -> pi * (Ra(x)^2 - ra(x)^2), a,b)
numericq(val)


a, b = 0, exp(log(2))
ra(y) = log(2) - log(y)
val, _ = quadgk(y -> pi * ra(y)^2, a, b)
numericq(val)


import LinearAlgebra: norm
cm=[2/3, 1/3]
c = [1/2, 1/2]
r = norm(cm - c)
A = 1/2 * 1 * 1
val = 2pi*r*A
numericq(val)


theta = pi/4  ## we write y=x as y = x * tan(pi/4) for more generality, as this allows other slants.

f(x) = x^2
xval(u) = find_zero(x -> u*sin(theta) - 1/tan(theta) * (x - u*cos(theta)) - f(x), (u*cos(theta), 1))
rad(u) = sqrt((u*cos(theta) - xval(u))^2 + (u*sin(theta) - f(xval(u)))^2)


a, b = 0, sqrt(2)
val, _ = quadgk(u -> pi*rad(u)^2, a, b)
numericq(val)


f(x) = x^20
xval(u) = find_zero(x -> u*sin(theta) - 1/tan(theta) * (x - u*cos(theta)) - f(x), (0,sqrt(2)))
rad(u) = sqrt((u*cos(theta) - xval(u))^2 + (u*sin(theta) - f(xval(u)))^2)
val, _ = quadgk(u -> pi*rad(u)^2, a, b)
numericq(val)

